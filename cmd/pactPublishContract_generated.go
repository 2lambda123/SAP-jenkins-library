// Code generated by piper's step-generator. DO NOT EDIT.

package cmd

import (
	"fmt"
	"os"
	"time"

	"github.com/SAP/jenkins-library/pkg/config"
	"github.com/SAP/jenkins-library/pkg/log"
	"github.com/SAP/jenkins-library/pkg/splunk"
	"github.com/SAP/jenkins-library/pkg/telemetry"
	"github.com/SAP/jenkins-library/pkg/validation"
	"github.com/spf13/cobra"
)

type pactPublishContractOptions struct {
	BuildID                   string `json:"buildId,omitempty"`
	CommitID                  string `json:"commitId,omitempty"`
	EnforceAsyncAPIValidation bool   `json:"enforceAsyncApiValidation,omitempty"`
	EnforceOpenAPIValidation  bool   `json:"enforceOpenApiValidation,omitempty"`
	EnforcementConfig         string `json:"enforcementConfig,omitempty"`
	GitProvider               string `json:"gitProvider,omitempty"`
	GitPullID                 string `json:"gitPullId,omitempty"`
	OrgAlias                  string `json:"orgAlias,omitempty"`
	OrgOrigin                 string `json:"orgOrigin,omitempty"`
	PactBrokerBaseURL         string `json:"pactBrokerBaseURL,omitempty"`
	Username                  string `json:"username,omitempty"`
	Password                  string `json:"password,omitempty"`
	Token                     string `json:"token,omitempty"`
	PactsFolderPath           string `json:"pactsFolderPath,omitempty"`
	Repository                string `json:"repository,omitempty"`
	SourceBranchName          string `json:"sourceBranchName,omitempty"`
	SystemNamespace           string `json:"systemNamespace,omitempty"`
	TargetBranchName          string `json:"targetBranchName,omitempty"`
}

// PactPublishContractCommand Step to publish PACT contracts
func PactPublishContractCommand() *cobra.Command {
	const STEP_NAME = "pactPublishContract"

	metadata := pactPublishContractMetadata()
	var stepConfig pactPublishContractOptions
	var startTime time.Time
	var logCollector *log.CollectorHook
	var splunkClient *splunk.Splunk
	telemetryClient := &telemetry.Telemetry{}

	var createPactPublishContractCmd = &cobra.Command{
		Use:   STEP_NAME,
		Short: "Step to publish PACT contracts",
		Long: `External tool used in CI
https://www.npmjs.com/package/swagger-mock-validator


The procedure looks like below, assuming service A depends service B at runtime,
Service A publishes pact test cases during CI run
Service B does,
Download pact tests
Generate swagger API doc (JSON)
Run swagger-mock-validator to validate whether swagger fits pact test cases`,
		PreRunE: func(cmd *cobra.Command, _ []string) error {
			startTime = time.Now()
			log.SetStepName(STEP_NAME)
			log.SetVerbose(GeneralConfig.Verbose)

			GeneralConfig.GitHubAccessTokens = ResolveAccessTokens(GeneralConfig.GitHubTokens)

			path, _ := os.Getwd()
			fatalHook := &log.FatalHook{CorrelationID: GeneralConfig.CorrelationID, Path: path}
			log.RegisterHook(fatalHook)

			err := PrepareConfig(cmd, &metadata, STEP_NAME, &stepConfig, config.OpenPiperFile)
			if err != nil {
				log.SetErrorCategory(log.ErrorConfiguration)
				return err
			}

			if len(GeneralConfig.HookConfig.SentryConfig.Dsn) > 0 {
				sentryHook := log.NewSentryHook(GeneralConfig.HookConfig.SentryConfig.Dsn, GeneralConfig.CorrelationID)
				log.RegisterHook(&sentryHook)
			}

			if len(GeneralConfig.HookConfig.SplunkConfig.Dsn) > 0 {
				splunkClient = &splunk.Splunk{}
				logCollector = &log.CollectorHook{CorrelationID: GeneralConfig.CorrelationID}
				log.RegisterHook(logCollector)
			}

			if err = log.RegisterANSHookIfConfigured(GeneralConfig.CorrelationID); err != nil {
				log.Entry().WithError(err).Warn("failed to set up SAP Alert Notification Service log hook")
			}

			validation, err := validation.New(validation.WithJSONNamesForStructFields(), validation.WithPredefinedErrorMessages())
			if err != nil {
				return err
			}
			if err = validation.ValidateStruct(stepConfig); err != nil {
				log.SetErrorCategory(log.ErrorConfiguration)
				return err
			}

			return nil
		},
		Run: func(_ *cobra.Command, _ []string) {
			stepTelemetryData := telemetry.CustomData{}
			stepTelemetryData.ErrorCode = "1"
			handler := func() {
				config.RemoveVaultSecretFiles()
				stepTelemetryData.Duration = fmt.Sprintf("%v", time.Since(startTime).Milliseconds())
				stepTelemetryData.ErrorCategory = log.GetErrorCategory().String()
				stepTelemetryData.PiperCommitHash = GitCommit
				telemetryClient.SetData(&stepTelemetryData)
				telemetryClient.Send()
				if len(GeneralConfig.HookConfig.SplunkConfig.Dsn) > 0 {
					splunkClient.Send(telemetryClient.GetData(), logCollector)
				}
			}
			log.DeferExitHandler(handler)
			defer handler()
			telemetryClient.Initialize(GeneralConfig.NoTelemetry, STEP_NAME)
			if len(GeneralConfig.HookConfig.SplunkConfig.Dsn) > 0 {
				splunkClient.Initialize(GeneralConfig.CorrelationID,
					GeneralConfig.HookConfig.SplunkConfig.Dsn,
					GeneralConfig.HookConfig.SplunkConfig.Token,
					GeneralConfig.HookConfig.SplunkConfig.Index,
					GeneralConfig.HookConfig.SplunkConfig.SendLogs)
			}
			pactPublishContract(stepConfig, &stepTelemetryData)
			stepTelemetryData.ErrorCode = "0"
			log.Entry().Info("SUCCESS")
		},
	}

	addPactPublishContractFlags(createPactPublishContractCmd, &stepConfig)
	return createPactPublishContractCmd
}

func addPactPublishContractFlags(cmd *cobra.Command, stepConfig *pactPublishContractOptions) {
	cmd.Flags().StringVar(&stepConfig.BuildID, "buildId", os.Getenv("PIPER_buildId"), "TBD")
	cmd.Flags().StringVar(&stepConfig.CommitID, "commitId", os.Getenv("PIPER_commitId"), "Git commitId for triggering the step.")
	cmd.Flags().BoolVar(&stepConfig.EnforceAsyncAPIValidation, "enforceAsyncApiValidation", false, "TBD")
	cmd.Flags().BoolVar(&stepConfig.EnforceOpenAPIValidation, "enforceOpenApiValidation", false, "TBD")
	cmd.Flags().StringVar(&stepConfig.EnforcementConfig, "enforcementConfig", os.Getenv("PIPER_enforcementConfig"), "TBD")
	cmd.Flags().StringVar(&stepConfig.GitProvider, "gitProvider", os.Getenv("PIPER_gitProvider"), "TBD")
	cmd.Flags().StringVar(&stepConfig.GitPullID, "gitPullId", os.Getenv("PIPER_gitPullId"), "TBD")
	cmd.Flags().StringVar(&stepConfig.OrgAlias, "orgAlias", os.Getenv("PIPER_orgAlias"), "TBD")
	cmd.Flags().StringVar(&stepConfig.OrgOrigin, "orgOrigin", os.Getenv("PIPER_orgOrigin"), "TBD")
	cmd.Flags().StringVar(&stepConfig.PactBrokerBaseURL, "pactBrokerBaseURL", os.Getenv("PIPER_pactBrokerBaseURL"), "Defines the URL to the PACT broker.")
	cmd.Flags().StringVar(&stepConfig.Username, "username", os.Getenv("PIPER_username"), "Defines the username for the PACT broker.")
	cmd.Flags().StringVar(&stepConfig.Password, "password", os.Getenv("PIPER_password"), "Defines the password for the PACT broker.")
	cmd.Flags().StringVar(&stepConfig.Token, "token", os.Getenv("PIPER_token"), "Defines the token for the PACT broker.")
	cmd.Flags().StringVar(&stepConfig.PactsFolderPath, "pactsFolderPath", os.Getenv("PIPER_pactsFolderPath"), "Defines PACT target folder containing the pact contracts to publish.")
	cmd.Flags().StringVar(&stepConfig.Repository, "repository", os.Getenv("PIPER_repository"), "Set the GitHub repository.")
	cmd.Flags().StringVar(&stepConfig.SourceBranchName, "sourceBranchName", os.Getenv("PIPER_sourceBranchName"), "Branch/Tag of consumer contract location.")
	cmd.Flags().StringVar(&stepConfig.SystemNamespace, "systemNamespace", os.Getenv("PIPER_systemNamespace"), "TBD")
	cmd.Flags().StringVar(&stepConfig.TargetBranchName, "targetBranchName", os.Getenv("PIPER_targetBranchName"), "ToDo: update description - Participant version.")

}

// retrieve step metadata
func pactPublishContractMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:        "pactPublishContract",
			Aliases:     []config.Alias{},
			Description: "Step to publish PACT contracts",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Parameters: []config.StepParameters{
					{
						Name:        "buildId",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_buildId"),
					},
					{
						Name: "commitId",
						ResourceRef: []config.ResourceReference{
							{
								Name:  "commonPipelineEnvironment",
								Param: "git/commitId",
							},
						},
						Scope:     []string{},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "gitCommit"}},
						Default:   os.Getenv("PIPER_commitId"),
					},
					{
						Name:        "enforceAsyncApiValidation",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"GENERAL", "PARAMETERS", "STAGES", "STEPS"},
						Type:        "bool",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     false,
					},
					{
						Name:        "enforceOpenApiValidation",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"GENERAL", "PARAMETERS", "STAGES", "STEPS"},
						Type:        "bool",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     false,
					},
					{
						Name:        "enforcementConfig",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_enforcementConfig"),
					},
					{
						Name:        "gitProvider",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_gitProvider"),
					},
					{
						Name:        "gitPullId",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_gitPullId"),
					},
					{
						Name:        "orgAlias",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_orgAlias"),
					},
					{
						Name:        "orgOrigin",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_orgOrigin"),
					},
					{
						Name:        "pactBrokerBaseURL",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_pactBrokerBaseURL"),
					},
					{
						Name:        "username",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "pactBrokerUsername"}},
						Default:     os.Getenv("PIPER_username"),
					},
					{
						Name:        "password",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "pactBrokerPassword"}},
						Default:     os.Getenv("PIPER_password"),
					},
					{
						Name:        "token",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "pactBrokerToken"}},
						Default:     os.Getenv("PIPER_token"),
					},
					{
						Name:        "pactsFolderPath",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "pathToPactsFolder"}},
						Default:     os.Getenv("PIPER_pactsFolderPath"),
					},
					{
						Name: "repository",
						ResourceRef: []config.ResourceReference{
							{
								Name:  "commonPipelineEnvironment",
								Param: "github/repository",
							},
						},
						Scope:     []string{},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "githubRepo"}, {Name: "gitRepo"}},
						Default:   os.Getenv("PIPER_repository"),
					},
					{
						Name:        "sourceBranchName",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "branchName"}, {Name: "gitSourceBranch"}},
						Default:     os.Getenv("PIPER_sourceBranchName"),
					},
					{
						Name:        "systemNamespace",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
						Default:     os.Getenv("PIPER_systemNamespace"),
					},
					{
						Name:        "targetBranchName",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "gitTargetBranch"}},
						Default:     os.Getenv("PIPER_targetBranchName"),
					},
				},
			},
		},
	}
	return theMetaData
}
