// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func CheckmarxExecuteScanMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "checkmarxExecuteScan",
			Aliases: []config.Alias{},
			Description: "Checkmarx is the recommended tool for security scans of JavaScript, iOS, Swift and Ruby code.",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "checkmarxCredentialsId",Description: "Jenkins 'Username with password' credentials ID containing username and password to communicate with the Checkmarx backend.",Type: "jenkins",
					}, 
					{Name: "githubTokenCredentialsId",Description: "Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub.",Type: "jenkins",
					}, 
				},
				Resources: []config.StepResources{
					{Name: "checkmarx",Type: "stash",
					},
				},
				Parameters: []config.StepParameters{
					{
						Name:      "assignees",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{``},
					},
					{
						Name:      "avoidDuplicateProjectScans",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "notForceScan"},},
						Default:   true,
					},
					{
						Name:      "filterPattern",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `!**/node_modules/**, !**/.xmake/**, !**/*_test.go, !**/vendor/**/*.go, **/*.html, **/*.xml, **/*.go, **/*.py, **/*.js, **/*.scala, **/*.ts`,
					},
					{
						Name:      "fullScanCycle",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `5`,
					},
					{
						Name:      "fullScansScheduled",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
					{
						Name:      "generatePdfReport",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
					{
						Name:      "githubApiUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `https://api.github.com`,
					},
					{
						Name:      "githubToken",
						ResourceRef: []config.ResourceReference{
							{
								Name:"githubTokenCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"githubVaultSecretName",
								Type: "vaultSecret",
								Default: "github",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "access_token"},},
						Default:   os.Getenv("PIPER_githubToken"),
					},
					{
						Name:      "incremental",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
					{
						Name:      "maxRetries",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   3,
					},
					{
						Name:      "owner",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "github/owner",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "githubOrg"},},
						Default:   os.Getenv("PIPER_owner"),
					},
					{
						Name:      "password",
						ResourceRef: []config.ResourceReference{
							{
								Name:"checkmarxCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        
							{
								Name:"checkmarxVaultSecretName",
								Type: "vaultSecret",
								Default: "checkmarx",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_password"),
					},
					{
						Name:      "preset",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_preset"),
					},
					{
						Name:      "projectName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "checkmarxProject"},{Name: "checkMarxProjectName", Deprecated: true},},
						Default:   os.Getenv("PIPER_projectName"),
					},
					{
						Name:      "pullRequestName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_pullRequestName"),
					},
					{
						Name:      "repository",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "github/repository",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "githubRepo"},},
						Default:   os.Getenv("PIPER_repository"),
					},
					{
						Name:      "serverUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "checkmarxServerUrl"},},
						Default:   os.Getenv("PIPER_serverUrl"),
					},
					{
						Name:      "engineConfigurationID",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "sourceEncoding"},},
						Default:   os.Getenv("PIPER_engineConfigurationID"),
					},
					{
						Name:      "teamId",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "checkmarxGroupId"},{Name: "groupId", Deprecated: true},},
						Default:   os.Getenv("PIPER_teamId"),
					},
					{
						Name:      "teamName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_teamName"),
					},
					{
						Name:      "username",
						ResourceRef: []config.ResourceReference{
							{
								Name:"checkmarxCredentialsId",
								Param: "username",
								Type: "secret",
							},
                        
							{
								Name:"checkmarxVaultSecretName",
								Type: "vaultSecret",
								Default: "checkmarx",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_username"),
					},
					{
						Name:      "verifyOnly",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "vulnerabilityThresholdEnabled",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
					{
						Name:      "vulnerabilityThresholdHigh",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   100,
					},
					{
						Name:      "vulnerabilityThresholdMedium",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   100,
					},
					{
						Name:      "vulnerabilityThresholdLow",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   10,
					},
					{
						Name:      "vulnerabilityThresholdLowPerQuery",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "vulnerabilityThresholdLowPerQueryMax",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   10,
					},
					{
						Name:      "vulnerabilityThresholdResult",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `FAILURE`,
					},
					{
						Name:      "vulnerabilityThresholdUnit",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `percentage`,
					},
					{
						Name:      "isOptimizedAndScheduled",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/isOptimizedAndScheduled",
							},
                        },
						Scope:     []string{"PARAMETERS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "createResultIssue",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/isOptimizedAndScheduled",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "convertToSarif",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
				},
			},
			Outputs: config.StepOutputs{
				Resources: []config.StepResources{
					{
						Name: "influx",
						Type: "influx",
						Parameters: []map[string]interface{}{
							{"name": "step_data","fields": []map[string]string{ {"name": "checkmarx"}, },},
							{"name": "checkmarx_data","fields": []map[string]string{ {"name": "high_issues"},  {"name": "high_not_false_positive"},  {"name": "high_not_exploitable"},  {"name": "high_confirmed"},  {"name": "high_urgent"},  {"name": "high_proposed_not_exploitable"},  {"name": "high_to_verify"},  {"name": "medium_issues"},  {"name": "medium_not_false_positive"},  {"name": "medium_not_exploitable"},  {"name": "medium_confirmed"},  {"name": "medium_urgent"},  {"name": "medium_proposed_not_exploitable"},  {"name": "medium_to_verify"},  {"name": "low_issues"},  {"name": "low_not_false_positive"},  {"name": "low_not_exploitable"},  {"name": "low_confirmed"},  {"name": "low_urgent"},  {"name": "low_proposed_not_exploitable"},  {"name": "low_to_verify"},  {"name": "information_issues"},  {"name": "information_not_false_positive"},  {"name": "information_not_exploitable"},  {"name": "information_confirmed"},  {"name": "information_urgent"},  {"name": "information_proposed_not_exploitable"},  {"name": "information_to_verify"},  {"name": "lines_of_code_scanned"},  {"name": "files_scanned"},  {"name": "initiator_name"},  {"name": "owner"},  {"name": "scan_id"},  {"name": "project_id"},  {"name": "projectName"},  {"name": "team"},  {"name": "team_full_path_on_report_date"},  {"name": "scan_start"},  {"name": "scan_time"},  {"name": "checkmarx_version"},  {"name": "scan_type"},  {"name": "preset"},  {"name": "deep_link"},  {"name": "report_creation_time"}, },},
						},
					},
					{
						Name: "reports",
						Type: "reports",
						Parameters: []map[string]interface{}{
							{"filePattern": "**/piper_checkmarx_report.html","type": "checkmarx",},
							{"filePattern": "**/CxSASTResults_*.xml","type": "checkmarx",},
							{"filePattern": "**/ScanReport.*","type": "checkmarx",},
							{"filePattern": "**/toolrun_checkmarx_*.json","type": "checkmarx",},
						},
					},
				},
			},
		},
	}
	return theMetaData
}
