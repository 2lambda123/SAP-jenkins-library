// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func DetectExecuteScanMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "detectExecuteScan",
			Aliases: []config.Alias{},
			Description: "Executes Synopsys Detect scan",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "detectTokenCredentialsId",Description: "Jenkins 'Secret text' credentials ID containing the API token used to authenticate with the Synopsis Detect (formerly BlackDuck) Server.",Type: "jenkins",Aliases: []config.Alias{ {Name: "apiTokenCredentialsId", Deprecated: false}, },
					}, 
					{Name: "githubTokenCredentialsId",Description: "Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub.",Type: "jenkins",
					}, 
					{Name: "golangPrivateModulesGitTokenCredentialsId",Description: "Jenkins 'Username with password' credentials ID containing username/password for http access to your git repos where your go private modules are stored.",Type: "jenkins",
					}, 
				},
				Resources: []config.StepResources{
					{Name: "buildDescriptor",Type: "stash",
					},
					{Name: "checkmarx",Type: "stash",
					},
				},
				Parameters: []config.StepParameters{
					{
						Name:      "token",
						ResourceRef: []config.ResourceReference{
							{
								Name:"detectTokenCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"detectVaultSecretName",
								Type: "vaultSecret",
								Default: "detect",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "blackduckToken"},{Name: "detectToken"},{Name: "apiToken", Deprecated: true},{Name: "detect/apiToken", Deprecated: true},},
						Default:   os.Getenv("PIPER_token"),
					},
					{
						Name:      "codeLocation",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_codeLocation"),
					},
					{
						Name:      "projectName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "detect/projectName"},},
						Default:   os.Getenv("PIPER_projectName"),
					},
					{
						Name:      "scanners",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/scanners"},},
						Default:   []string{`signature`},
					},
					{
						Name:      "scanPaths",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/scanPaths"},},
						Default:   []string{`.`},
					},
					{
						Name:      "dependencyPath",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/dependencyPath"},},
						Default:   `.`,
					},
					{
						Name:      "unmap",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/unmap"},},
						Default:   false,
					},
					{
						Name:      "scanProperties",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/scanProperties"},},
						Default:   []string{`--blackduck.signature.scanner.memory=4096`, `--detect.timeout=6000`, `--blackduck.trust.cert=true`, `--logging.level.com.synopsys.integration=DEBUG`, `--detect.maven.excluded.scopes=test`},
					},
					{
						Name:      "serverUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "detect/serverUrl"},{Name: "detectServerUrl"},},
						Default:   os.Getenv("PIPER_serverUrl"),
					},
					{
						Name:      "groups",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/groups"},},
						Default:   []string{},
					},
					{
						Name:      "failOn",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/failOn"},},
						Default:   []string{`BLOCKER`},
					},
					{
						Name:      "versioningModel",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","GENERAL","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `major`,
					},
					{
						Name:      "version",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "artifactVersion",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "projectVersion"},{Name: "detect/projectVersion"},},
						Default:   os.Getenv("PIPER_version"),
					},
					{
						Name:      "customScanVersion",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","STAGES","STEPS","PARAMETERS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_customScanVersion"),
					},
					{
						Name:      "projectSettingsFile",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "maven/projectSettingsFile"},},
						Default:   os.Getenv("PIPER_projectSettingsFile"),
					},
					{
						Name:      "globalSettingsFile",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "maven/globalSettingsFile"},},
						Default:   os.Getenv("PIPER_globalSettingsFile"),
					},
					{
						Name:      "m2Path",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","STEPS","STAGES","PARAMETERS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "maven/m2Path"},},
						Default:   os.Getenv("PIPER_m2Path"),
					},
					{
						Name:      "installArtifacts",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","STEPS","STAGES","PARAMETERS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "includedPackageManagers",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/includedPackageManagers"},},
						Default:   []string{},
					},
					{
						Name:      "excludedPackageManagers",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/excludedPackageManagers"},},
						Default:   []string{},
					},
					{
						Name:      "mavenExcludedScopes",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/mavenExcludedScopes"},},
						Default:   []string{},
					},
					{
						Name:      "detectTools",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/detectTools"},},
						Default:   []string{},
					},
					{
						Name:      "scanOnChanges",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "useDetect7",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/useDetect7"},},
						Default:   false,
					},
					{
						Name:      "useDetect8",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/useDetect8", Deprecated: true},},
						Default:   true,
					},
					{
						Name:      "successOnSkip",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/successOnSkip", Deprecated: true},},
						Default:   true,
					},
					{
						Name:      "customEnvironmentVariables",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "minScanInterval",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   0,
					},
					{
						Name:      "githubToken",
						ResourceRef: []config.ResourceReference{
							{
								Name:"githubTokenCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"githubVaultSecretName",
								Type: "vaultSecret",
								Default: "github",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "access_token"},},
						Default:   os.Getenv("PIPER_githubToken"),
					},
					{
						Name:      "createResultIssue",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/isOptimizedAndScheduled",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "githubApiUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `https://api.github.com`,
					},
					{
						Name:      "owner",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "github/owner",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "githubOrg"},},
						Default:   os.Getenv("PIPER_owner"),
					},
					{
						Name:      "repository",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "github/repository",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "githubRepo"},},
						Default:   os.Getenv("PIPER_repository"),
					},
					{
						Name:      "assignees",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{``},
					},
					{
						Name:      "customTlsCertificateLinks",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "failOnSevereVulnerabilities",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
					{
						Name:      "buildTool",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "buildTool",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_buildTool"),
					},
					{
						Name:      "excludedDirectories",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/excludedDirectories"},},
						Default:   []string{},
					},
					{
						Name:      "npmDependencyTypesExcluded",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/npmDependencyTypesExcluded"},},
						Default:   []string{},
					},
					{
						Name:      "npmArguments",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "detect/npmArguments"},},
						Default:   []string{},
					},
					{
						Name:      "privateModules",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","STEPS","STAGES","PARAMETERS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_privateModules"),
					},
					{
						Name:      "privateModulesGitToken",
						ResourceRef: []config.ResourceReference{
							{
								Name:"golangPrivateModulesGitTokenCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        
							{
								Name:"golangPrivateModulesGitTokenVaultSecret",
								Type: "vaultSecret",
								Default: "golang",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_privateModulesGitToken"),
					},
				},
			},
			Containers: []config.Container{
				{Name: "openjdk",Image: "openjdk:11",WorkingDir: "/root",Options: []config.Option{ {Name: "-u", Value: "0"}, },
				}, 
			},
			Outputs: config.StepOutputs{
				Resources: []config.StepResources{
					{
						Name: "influx",
						Type: "influx",
						Parameters: []map[string]interface{}{
							{"name": "step_data","fields": []map[string]string{ {"name": "detect"}, },},
							{"name": "detect_data","fields": []map[string]string{ {"name": "vulnerabilities"},  {"name": "major_vulnerabilities"},  {"name": "minor_vulnerabilities"},  {"name": "components"},  {"name": "policy_violations"}, },},
						},
					},
					{
						Name: "reports",
						Type: "reports",
						Parameters: []map[string]interface{}{
							{"filePattern": "**/*BlackDuck_RiskReport.pdf","type": "blackduck-ip",},
							{"filePattern": "**/blackduck-ip.json","type": "blackduck-ip",},
							{"filePattern": "**/toolrun_detectExecute_*.json","type": "blackduck-ip",},
							{"filePattern": "**/piper_detect_policy_violation_report.html","type": "blackduck-ip",},
							{"filePattern": "**/*BlackDuck_RiskReport.pdf","type": "blackduck-security",},
							{"filePattern": "**/detectExecuteScan_policy_*.json","type": "blackduck-security",},
							{"filePattern": "**/piper_detect_vulnerability_report.html","type": "blackduck-security",},
							{"filePattern": "**/toolrun_detectExecute_*.json","type": "blackduck-security",},
							{"filePattern": "**/piper_detect_vulnerability.sarif","type": "blackduck-security",},
							{"filePattern": "**/piper_hub_detect_sbom.xml","type": "blackduck-security",},
						},
					},
				},
			},
		},
	}
	return theMetaData
}
