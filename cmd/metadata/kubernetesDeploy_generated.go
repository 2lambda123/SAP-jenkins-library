// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func KubernetesDeployMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "kubernetesDeploy",
			Aliases: []config.Alias{{Name: "deployToKubernetes", Deprecated: true},},
			Description: "Deployment to Kubernetes test or production namespace within the specified Kubernetes cluster.",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "kubeConfigFileCredentialsId",Description: "Jenkins 'Secret file' credentials ID containing kubeconfig file. Details can be found in the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/).",Type: "jenkins",Aliases: []config.Alias{ {Name: "kubeCredentialsId", Deprecated: true}, },
					}, 
					{Name: "kubeTokenCredentialsId",Description: "Jenkins 'Secret text' credentials ID containing token to authenticate to Kubernetes. This is an alternative way to using a kubeconfig file. Details can be found in the [Kubernetes documentation](https://kubernetes.io/docs/reference/access-authn-authz/authentication/).",Type: "jenkins",Aliases: []config.Alias{ {Name: "k8sTokenCredentialsId", Deprecated: true}, },
					}, 
					{Name: "dockerCredentialsId",Type: "jenkins",
					}, 
					{Name: "dockerConfigJsonCredentialsId",Description: "Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)).",Type: "jenkins",
					}, 
					{Name: "githubTokenCredentialsId",Description: "Jenkins credentials ID containing the github token.",Type: "jenkins",
					}, 
				},
				Resources: []config.StepResources{
					{Name: "deployDescriptor",Type: "stash",
					},
					{Name: "downloadedArtifact",Type: "stash",
					},
				},
				Parameters: []config.StepParameters{
					{
						Name:      "additionalParameters",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmDeploymentParameters"},},
						Default:   []string{},
					},
					{
						Name:      "apiServer",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "k8sAPIServer"},},
						Default:   os.Getenv("PIPER_apiServer"),
					},
					{
						Name:      "appTemplate",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "k8sAppTemplate"},},
						Default:   os.Getenv("PIPER_appTemplate"),
					},
					{
						Name:      "chartPath",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/localHelmChartPath",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmChartPath"},},
						Default:   os.Getenv("PIPER_chartPath"),
					},
					{
						Name:      "containerRegistryPassword",
						ResourceRef: []config.ResourceReference{
							{
								Name:"dockerCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "container/repositoryPassword",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/repositoryPassword",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_containerRegistryPassword"),
					},
					{
						Name:      "containerImageName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "dockerImageName"},},
						Default:   os.Getenv("PIPER_containerImageName"),
					},
					{
						Name:      "containerImageTag",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "artifactVersion",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "artifactVersion"},},
						Default:   os.Getenv("PIPER_containerImageTag"),
					},
					{
						Name:      "containerRegistryUrl",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/registryUrl",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "dockerRegistryUrl"},},
						Default:   os.Getenv("PIPER_containerRegistryUrl"),
					},
					{
						Name:      "containerRegistryUser",
						ResourceRef: []config.ResourceReference{
							{
								Name:"dockerCredentialsId",
								Param: "username",
								Type: "secret",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "container/repositoryUsername",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/repositoryUsername",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_containerRegistryUser"),
					},
					{
						Name:      "containerRegistrySecret",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `regsecret`,
					},
					{
						Name:      "createDockerRegistrySecret",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "deploymentName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmDeploymentName"},},
						Default:   os.Getenv("PIPER_deploymentName"),
					},
					{
						Name:      "deployTool",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   `kubectl`,
					},
					{
						Name:      "forceUpdates",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "force"},},
						Default:   true,
					},
					{
						Name:      "helmDeployWaitSeconds",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   300,
					},
					{
						Name:      "helmTestWaitSeconds",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   300,
					},
					{
						Name:      "helmValues",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "valuesMapping",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "map[string]interface{}",
						Mandatory: false,
						Aliases:   []config.Alias{},
						
					},
					{
						Name:      "renderSubchartNotes",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
					{
						Name:      "githubToken",
						ResourceRef: []config.ResourceReference{
							{
								Name:"githubTokenCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"githubVaultSecretName",
								Type: "vaultSecret",
								Default: "github",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "access_token"},},
						Default:   os.Getenv("PIPER_githubToken"),
					},
					{
						Name:      "image",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/imageNameTag",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "deployImage"},},
						Default:   os.Getenv("PIPER_image"),
						DeprecationMessage: "This parameter is deprecated, please use [containerImageName](#containerimagename) and [containerImageTag](#containerimagetag)",
					},
					{
						Name:      "imageNames",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/imageNames",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "imageNameTags",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/imageNameTags",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "imageDigests",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/imageDigests",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "ingressHosts",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "keepFailedDeployments",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "runHelmTests",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "showTestLogs",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "kubeConfig",
						ResourceRef: []config.ResourceReference{
							{
								Name:"kubeConfigFileCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"kubeConfigFileVaultSecretName",
								Type: "vaultSecretFile",
								Default: "kube-config",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_kubeConfig"),
					},
					{
						Name:      "kubeContext",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_kubeContext"),
					},
					{
						Name:      "kubeToken",
						ResourceRef: []config.ResourceReference{
							{
								Name:"kubeTokenCredentialsId",
								Type: "secret",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_kubeToken"),
					},
					{
						Name:      "namespace",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmDeploymentNamespace"},{Name: "k8sDeploymentNamespace"},},
						Default:   `default`,
					},
					{
						Name:      "tillerNamespace",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmTillerNamespace"},},
						Default:   os.Getenv("PIPER_tillerNamespace"),
					},
					{
						Name:      "dockerConfigJSON",
						ResourceRef: []config.ResourceReference{
							{
								Name:"dockerConfigJsonCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"dockerConfigFileVaultSecretName",
								Type: "vaultSecretFile",
								Default: "docker-config",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `.pipeline/docker/config.json`,
					},
					{
						Name:      "deployCommand",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `apply`,
					},
					{
						Name:      "setupScript",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_setupScript"),
					},
					{
						Name:      "verificationScript",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_verificationScript"),
					},
					{
						Name:      "teardownScript",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_teardownScript"),
					},
				},
			},
			Containers: []config.Container{
				{Image: "dtzar/helm-kubectl:3",WorkingDir: "/config",Options: []config.Option{ {Name: "-u", Value: "0"}, },Conditions: []config.Condition{ {ConditionRef: "strings-equal", Params: []config.Param{ { Name: "deployTool", Value: "helm3" }, } }, },
				}, 
				{Image: "dtzar/helm-kubectl:2.17.0",WorkingDir: "/config",Options: []config.Option{ {Name: "-u", Value: "0"}, },Conditions: []config.Condition{ {ConditionRef: "strings-equal", Params: []config.Param{ { Name: "deployTool", Value: "helm" }, } }, },
				}, 
				{Image: "dtzar/helm-kubectl:2.17.0",WorkingDir: "/config",Options: []config.Option{ {Name: "-u", Value: "0"}, },Conditions: []config.Condition{ {ConditionRef: "strings-equal", Params: []config.Param{ { Name: "deployTool", Value: "kubectl" }, } }, },
				}, 
			},
			
		},
	}
	return theMetaData
}
