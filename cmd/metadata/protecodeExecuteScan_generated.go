// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func ProtecodeExecuteScanMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "protecodeExecuteScan",
			Aliases: []config.Alias{},
			Description: "Black Duck Binary Analysis (BDBA), previously known as Protecode is an Open Source Vulnerability Scanner that is capable of scanning binaries. It can be used to scan docker images but is supports many other programming languages especially those of the C family.",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "protecodeCredentialsId",Description: "Jenkins 'Username with password' credentials ID containing username and password to authenticate to the Protecode system.",Type: "jenkins",
					}, 
					{Name: "protecodeApiKeyCredentialsId",Description: "Jenkins 'Secret text' credentials ID containing API Key/token to authenticate to BDBA server.",Type: "jenkins",
					}, 
					{Name: "dockerConfigJsonCredentialsId",Description: "Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can create it like explained in [Prerequisites](https://www.project-piper.io/steps/protecodeExecuteScan/#prerequisites).",Type: "jenkins",Aliases: []config.Alias{ {Name: "dockerCredentialsId", Deprecated: true}, },
					}, 
				},
				Parameters: []config.StepParameters{
					{
						Name:      "excludeCVEs",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "protecodeExcludeCVEs"},},
						Default:   ``,
					},
					{
						Name:      "failOnSevereVulnerabilities",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "protecodeFailOnSevereVulnerabilities"},},
						Default:   true,
					},
					{
						Name:      "scanImage",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/imageNameTag",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "dockerImage"},},
						Default:   os.Getenv("PIPER_scanImage"),
					},
					{
						Name:      "dockerRegistryUrl",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/registryUrl",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_dockerRegistryUrl"),
					},
					{
						Name:      "containerRegistryPassword",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/repositoryPassword",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/repositoryPassword",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_containerRegistryPassword"),
					},
					{
						Name:      "containerRegistryUser",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/repositoryUsername",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/repositoryUsername",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_containerRegistryUser"),
					},
					{
						Name:      "dockerConfigJSON",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/dockerConfigJSON",
							},
                        
							{
								Name:"dockerConfigJsonCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"dockerConfigFileVaultSecretName",
								Type: "vaultSecretFile",
								Default: "docker-config",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_dockerConfigJSON"),
					},
					{
						Name:      "cleanupMode",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `binary`,
					},
					{
						Name:      "filePath",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_filePath"),
					},
					{
						Name:      "timeoutMinutes",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "protecodeTimeoutMinutes"},},
						Default:   `60`,
					},
					{
						Name:      "serverUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "protecodeServerUrl"},},
						Default:   os.Getenv("PIPER_serverUrl"),
					},
					{
						Name:      "reportFileName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `protecode_report.pdf`,
					},
					{
						Name:      "fetchUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_fetchUrl"),
					},
					{
						Name:      "group",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "protecodeGroup"},},
						Default:   os.Getenv("PIPER_group"),
					},
					{
						Name:      "verifyOnly",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "reuseExisting", Deprecated: true},},
						Default:   false,
					},
					{
						Name:      "replaceProductId",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   0,
					},
					{
						Name:      "username",
						ResourceRef: []config.ResourceReference{
							{
								Name:"protecodeCredentialsId",
								Param: "username",
								Type: "secret",
							},
                        
							{
								Name:"protecodeVaultSecretName",
								Type: "vaultSecret",
								Default: "protecode",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "user", Deprecated: true},},
						Default:   os.Getenv("PIPER_username"),
					},
					{
						Name:      "password",
						ResourceRef: []config.ResourceReference{
							{
								Name:"protecodeCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        
							{
								Name:"protecodeVaultSecretName",
								Type: "vaultSecret",
								Default: "protecode",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_password"),
					},
					{
						Name:      "userAPIKey",
						ResourceRef: []config.ResourceReference{
							{
								Name:"protecodeApiKeyCredentialsId",
								Param: "userAPIKey",
								Type: "secret",
							},
                        
							{
								Name:"protecodeApiKeyVaultSecretName",
								Type: "vaultSecret",
								Default: "protecode",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_userAPIKey"),
					},
					{
						Name:      "version",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "artifactVersion",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "artifactVersion", Deprecated: true},},
						Default:   os.Getenv("PIPER_version"),
					},
					{
						Name:      "customScanVersion",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","STAGES","STEPS","PARAMETERS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_customScanVersion"),
					},
					{
						Name:      "versioningModel",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","GENERAL","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `major`,
					},
					{
						Name:      "pullRequestName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_pullRequestName"),
					},
					{
						Name:      "customDataJSONMap",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","STEPS","STAGES","PARAMETERS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_customDataJSONMap"),
					},
				},
			},
			Outputs: config.StepOutputs{
				Resources: []config.StepResources{
					{
						Name: "influx",
						Type: "influx",
						Parameters: []map[string]interface{}{
							{"name": "step_data","fields": []map[string]string{ {"name": "protecode"}, },},
							{"name": "protecode_data","fields": []map[string]string{ {"name": "excluded_vulnerabilities"},  {"name": "historical_vulnerabilities"},  {"name": "major_vulnerabilities"},  {"name": "minor_vulnerabilities"},  {"name": "triaged_vulnerabilities"},  {"name": "vulnerabilities"}, },},
						},
					},
					{
						Name: "reports",
						Type: "reports",
						Parameters: []map[string]interface{}{
							{"filePattern": "**/toolrun_protecode_*.json","type": "protecode",},
							{"type": "protecode",},
							{"filePattern": "**/protecodeExecuteScan.json","type": "protecode",},
							{"filePattern": "**/protecodescan_vulns.json","type": "protecode",},
						},
					},
				},
			},
		},
	}
	return theMetaData
}
