// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func GitopsUpdateDeploymentMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "gitopsUpdateDeployment",
			Aliases: []config.Alias{},
			Description: "Updates Kubernetes Deployment Manifest in an Infrastructure Git Repository",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "gitHttpsCredentialsId",Description: "Jenkins 'Username with password' credentials ID containing username/password for http access to your git repository.",Type: "jenkins",
					}, 
				},
				Resources: []config.StepResources{
					{Name: "deployDescriptor",Type: "stash",
					},
				},
				Parameters: []config.StepParameters{
					{
						Name:      "branchName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   `master`,
					},
					{
						Name:      "commitMessage",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_commitMessage"),
					},
					{
						Name:      "serverUrl",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "githubServerUrl"},},
						Default:   `https://github.com`,
					},
					{
						Name:      "forcePush",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "username",
						ResourceRef: []config.ResourceReference{
							{
								Name:"gitHttpsCredentialsId",
								Param: "username",
								Type: "secret",
							},
                        
							{
								Name:"gitHttpsCredentialVaultSecretName",
								Type: "vaultSecret",
								Default: "gitHttpsCredential",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_username"),
					},
					{
						Name:      "password",
						ResourceRef: []config.ResourceReference{
							{
								Name:"gitHttpsCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        
							{
								Name:"gitHttpsCredentialVaultSecretName",
								Type: "vaultSecret",
								Default: "gitHttpsCredential",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_password"),
					},
					{
						Name:      "filePath",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_filePath"),
					},
					{
						Name:      "containerName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_containerName"),
					},
					{
						Name:      "containerRegistryUrl",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/registryUrl",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "dockerRegistryUrl"},},
						Default:   os.Getenv("PIPER_containerRegistryUrl"),
					},
					{
						Name:      "containerImageNameTag",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/imageNameTag",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "image", Deprecated: true},{Name: "containerImage"},},
						Default:   os.Getenv("PIPER_containerImageNameTag"),
					},
					{
						Name:      "chartPath",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmChartPath"},},
						Default:   os.Getenv("PIPER_chartPath"),
					},
					{
						Name:      "helmValues",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "deploymentName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmDeploymentName"},},
						Default:   os.Getenv("PIPER_deploymentName"),
					},
					{
						Name:      "tool",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   `kubectl`,
					},
					{
						Name:      "customTlsCertificateLinks",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
				},
			},
			Containers: []config.Container{
				{Image: "dtzar/helm-kubectl:3.8.0",WorkingDir: "/config",Options: []config.Option{ {Name: "-u", Value: "0"}, },Conditions: []config.Condition{ {ConditionRef: "strings-equal", Params: []config.Param{ { Name: "tool", Value: "helm" }, } }, },
				}, 
				{Image: "dtzar/helm-kubectl:3.8.0",WorkingDir: "/config",Options: []config.Option{ {Name: "-u", Value: "0"}, },Conditions: []config.Condition{ {ConditionRef: "strings-equal", Params: []config.Param{ { Name: "tool", Value: "kubectl" }, } }, },
				}, 
				{Image: "nekottyo/kustomize-kubeval:kustomizev4",WorkingDir: "/config",Options: []config.Option{ {Name: "-u", Value: "0"}, },Conditions: []config.Condition{ {ConditionRef: "strings-equal", Params: []config.Param{ { Name: "tool", Value: "kustomize" }, } }, },
				}, 
			},
			
		},
	}
	return theMetaData
}
