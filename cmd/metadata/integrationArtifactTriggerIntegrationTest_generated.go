// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func IntegrationArtifactTriggerIntegrationTestMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "integrationArtifactTriggerIntegrationTest",
			Aliases: []config.Alias{},
			Description: "Test the service endpoint of your iFlow",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "integrationFlowServiceKeyCredentialsId",Description: "Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'integration-flow'",Type: "jenkins",
					}, 
				},
				Parameters: []config.StepParameters{
					{
						Name:      "integrationFlowServiceKey",
						ResourceRef: []config.ResourceReference{
							{
								Name:"integrationFlowServiceKeyCredentialsId",
								Param: "integrationFlowServiceKey",
								Type: "secret",
							},
                        },
						Scope:     []string{"PARAMETERS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_integrationFlowServiceKey"),
					},
					{
						Name:      "integrationFlowId",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_integrationFlowId"),
					},
					{
						Name:      "integrationFlowServiceEndpointUrl",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/integrationFlowServiceEndpoint",
							},
                        },
						Scope:     []string{"PARAMETERS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_integrationFlowServiceEndpointUrl"),
					},
					{
						Name:      "contentType",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_contentType"),
					},
					{
						Name:      "messageBodyPath",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_messageBodyPath"),
					},
				},
			},
			Outputs: config.StepOutputs{
				Resources: []config.StepResources{
					{
						Name: "commonPipelineEnvironment",
						Type: "piperEnvironment",
						Parameters: []map[string]interface{}{
							{"name": "custom/integrationFlowTriggerIntegrationTestResponseBody",},
							{"name": "custom/integrationFlowTriggerIntegrationTestResponseHeaders",},
						},
					},
				},
			},
		},
	}
	return theMetaData
}
