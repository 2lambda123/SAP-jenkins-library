// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func CloudFoundryDeployMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "cloudFoundryDeploy",
			Aliases: []config.Alias{},
			Description: "Deploys an application to Cloud Foundry",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "cfCredentialsId",Description: "Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API.",Type: "jenkins",Aliases: []config.Alias{ {Name: "cloudFoundry/credentialsId", Deprecated: true}, },
					}, 
					{Name: "dockerCredentialsId",Description: "Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Docker registry.",Type: "jenkins",
					}, 
				},
				Parameters: []config.StepParameters{
					{
						Name:      "apiEndpoint",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "cfApiEndpoint"},{Name: "cloudFoundry/apiEndpoint", Deprecated: true},},
						Default:   `https://api.cf.eu10.hana.ondemand.com`,
					},
					{
						Name:      "appName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "cfAppName"},{Name: "cloudFoundry/appName", Deprecated: true},},
						Default:   os.Getenv("PIPER_appName"),
					},
					{
						Name:      "artifactVersion",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "artifactVersion",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_artifactVersion"),
					},
					{
						Name:      "commitHash",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "git/headCommitId",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_commitHash"),
					},
					{
						Name:      "cfHome",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_cfHome"),
					},
					{
						Name:      "cfNativeDeployParameters",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_cfNativeDeployParameters"),
					},
					{
						Name:      "cfPluginHome",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_cfPluginHome"),
					},
					{
						Name:      "deployDockerImage",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_deployDockerImage"),
					},
					{
						Name:      "deployTool",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_deployTool"),
					},
					{
						Name:      "buildTool",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "buildTool",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_buildTool"),
					},
					{
						Name:      "deployType",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `standard`,
					},
					{
						Name:      "dockerPassword",
						ResourceRef: []config.ResourceReference{
							{
								Name:"dockerCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_dockerPassword"),
					},
					{
						Name:      "dockerUsername",
						ResourceRef: []config.ResourceReference{
							{
								Name:"dockerCredentialsId",
								Param: "username",
								Type: "secret",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_dockerUsername"),
					},
					{
						Name:      "keepOldInstance",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "loginParameters",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_loginParameters"),
					},
					{
						Name:      "manifest",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "cfManifest"},{Name: "cloudFoundry/manifest", Deprecated: true},},
						Default:   os.Getenv("PIPER_manifest"),
					},
					{
						Name:      "manifestVariables",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "cfManifestVariables"},{Name: "cloudFoundry/manifestVariables", Deprecated: true},},
						Default:   []string{},
					},
					{
						Name:      "manifestVariablesFiles",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "cfManifestVariablesFiles"},{Name: "cloudFoundry/manifestVariablesFiles", Deprecated: true},},
						Default:   []string{`manifest-variables.yml`},
					},
					{
						Name:      "mtaDeployParameters",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `-f`,
					},
					{
						Name:      "mtaExtensionDescriptor",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "cloudFoundry/mtaExtensionDescriptor", Deprecated: true},},
						Default:   os.Getenv("PIPER_mtaExtensionDescriptor"),
					},
					{
						Name:      "mtaExtensionCredentials",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "map[string]interface{}",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "cloudFoundry/mtaExtensionCredentials", Deprecated: true},},
						
					},
					{
						Name:      "mtaPath",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "mtarFilePath",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_mtaPath"),
					},
					{
						Name:      "org",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "cfOrg"},{Name: "cloudFoundry/org", Deprecated: true},},
						Default:   os.Getenv("PIPER_org"),
					},
					{
						Name:      "password",
						ResourceRef: []config.ResourceReference{
							{
								Name:"cfCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        
							{
								Name:"cloudfoundryVaultSecretName",
								Type: "vaultSecret",
								Default: "cloudfoundry-$(org)-$(space)",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_password"),
					},
					{
						Name:      "smokeTestScript",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `blueGreenCheckScript.sh`,
					},
					{
						Name:      "smokeTestStatusCode",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   200,
					},
					{
						Name:      "space",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS","GENERAL",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "cfSpace"},{Name: "cloudFoundry/space", Deprecated: true},},
						Default:   os.Getenv("PIPER_space"),
					},
					{
						Name:      "username",
						ResourceRef: []config.ResourceReference{
							{
								Name:"cfCredentialsId",
								Param: "username",
								Type: "secret",
							},
                        
							{
								Name:"cloudfoundryVaultSecretName",
								Type: "vaultSecret",
								Default: "cloudfoundry-$(org)-$(space)",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_username"),
					},
				},
			},
			Containers: []config.Container{
				{Name: "cfDeploy",Image: "ppiper/cf-cli:latest",
				}, 
			},
			Outputs: config.StepOutputs{
				Resources: []config.StepResources{
					{
						Name: "influx",
						Type: "influx",
						Parameters: []map[string]interface{}{
							{"name": "deployment_data","fields": []map[string]string{ {"name": "artifactUrl"},  {"name": "deployTime"},  {"name": "commitHash"},  {"name": "jobTrigger"}, },"tags": []map[string]string{ {"name": "artifactVersion"},  {"name": "deployUser"},  {"name": "deployResult"},  {"name": "cfApiEndpoint"},  {"name": "cfOrg"},  {"name": "cfSpace"}, },},
						},
					},
				},
			},
		},
	}
	return theMetaData
}
