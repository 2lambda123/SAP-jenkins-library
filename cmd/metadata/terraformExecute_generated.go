// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func TerraformExecuteMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "terraformExecute",
			Aliases: []config.Alias{},
			Description: "Executes Terraform",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "cliConfigFileCredentialsId",Description: "Jenkins 'Secret file' credentials ID containing terraform CLI configuration. You can find more details about it in the [Terraform documentation](https://www.terraform.io/docs/cli/config/config-file.html#credentials).",Type: "jenkins",
					}, 
				},
				Parameters: []config.StepParameters{
					{
						Name:      "command",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `plan`,
					},
					{
						Name:      "terraformSecrets",
						ResourceRef: []config.ResourceReference{
							{
								Name:"terraformFileVaultSecretName",
								Type: "vaultSecretFile",
								Default: "terraform",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_terraformSecrets"),
					},
					{
						Name:      "globalOptions",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "additionalArgs",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "init",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "cliConfigFile",
						ResourceRef: []config.ResourceReference{
							{
								Name:"cliConfigFileCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"cliConfigFileVaultSecretName",
								Type: "vaultSecretFile",
								Default: "terraform",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_cliConfigFile"),
					},
					{
						Name:      "workspace",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_workspace"),
					},
				},
			},
			Containers: []config.Container{
				{Name: "terraform",Image: "hashicorp/terraform:1.0.10",EnvVars: []config.EnvVar{ {Name: "TF_IN_AUTOMATION", Value: "piper"}, },Options: []config.Option{ {Name: "--entrypoint", Value: ""}, },
				}, 
			},
			Outputs: config.StepOutputs{
				Resources: []config.StepResources{
					{
						Name: "commonPipelineEnvironment",
						Type: "piperEnvironment",
						Parameters: []map[string]interface{}{
							{"name": "custom/terraformOutputs","type": "map[string]interface{}",},
						},
					},
				},
			},
		},
	}
	return theMetaData
}
