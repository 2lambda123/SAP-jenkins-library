// Code generated by piper's step-generator. DO NOT EDIT.

package metadata

import (
	"os"
	"github.com/SAP/jenkins-library/pkg/config"
)

// retrieve step metadata
func HelmExecuteMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "helmExecute",
			Aliases: []config.Alias{},
			Description: "Executes helm3 functionality as the package manager for Kubernetes.",
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Secrets: []config.StepSecrets{
					{Name: "kubeConfigFileCredentialsId",Description: "Jenkins 'Secret file' credentials ID containing kubeconfig file. Details can be found in the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/).",Type: "jenkins",Aliases: []config.Alias{ {Name: "kubeCredentialsId", Deprecated: true}, },
					}, 
					{Name: "dockerConfigJsonCredentialsId",Description: "Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)).",Type: "jenkins",
					}, 
					{Name: "sourceRepositoryCredentialsId",Description: "Jenkins 'Username Password' credentials ID containing username and password for the Helm Repository authentication (source repo)",Type: "jenkins",
					}, 
					{Name: "targetRepositoryCredentialsId",Description: "Jenkins 'Username Password' credentials ID containing username and password for the Helm Repository authentication (target repo)",Type: "jenkins",
					}, 
				},
				Resources: []config.StepResources{
					{Name: "deployDescriptor",Type: "stash",
					},
				},
				Parameters: []config.StepParameters{
					{
						Name:      "additionalParameters",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmDeploymentParameters"},},
						Default:   []string{},
					},
					{
						Name:      "chartPath",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmChartPath"},},
						Default:   os.Getenv("PIPER_chartPath"),
					},
					{
						Name:      "targetRepositoryURL",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/helmRepositoryURL",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/repositoryUrl",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_targetRepositoryURL"),
					},
					{
						Name:      "targetRepositoryName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_targetRepositoryName"),
					},
					{
						Name:      "targetRepositoryUser",
						ResourceRef: []config.ResourceReference{
							{
								Name:"targetRepositoryCredentialsId",
								Param: "username",
								Type: "secret",
							},
                        
							{
								Name:"targetRepositoryUserSecretName",
								Type: "vaultSecret",
								Default: "publishing",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/helmRepositoryUsername",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/repositoryUsername",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmRepositoryUsername"},},
						Default:   os.Getenv("PIPER_targetRepositoryUser"),
					},
					{
						Name:      "targetRepositoryPassword",
						ResourceRef: []config.ResourceReference{
							{
								Name:"targetRepositoryCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        
							{
								Name:"targetRepositoryPasswordSecret",
								Type: "vaultSecret",
								Default: "publishing",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/helmRepositoryPassword",
							},
                        
							{
								Name:"commonPipelineEnvironment",
								Param: "custom/repositoryPassword",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmRepositoryPassword"},},
						Default:   os.Getenv("PIPER_targetRepositoryPassword"),
					},
					{
						Name:      "sourceRepositoryURL",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_sourceRepositoryURL"),
					},
					{
						Name:      "sourceRepositoryName",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_sourceRepositoryName"),
					},
					{
						Name:      "sourceRepositoryUser",
						ResourceRef: []config.ResourceReference{
							{
								Name:"sourceRepositoryCredentialsId",
								Param: "username",
								Type: "secret",
							},
                        
							{
								Name:"sourceRepositoryUserSecretName",
								Type: "vaultSecret",
								Default: "dependencies",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_sourceRepositoryUser"),
					},
					{
						Name:      "sourceRepositoryPassword",
						ResourceRef: []config.ResourceReference{
							{
								Name:"sourceRepositoryCredentialsId",
								Param: "password",
								Type: "secret",
							},
                        
							{
								Name:"sourceRepositoryPasswordSecret",
								Type: "vaultSecret",
								Default: "dependencies",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_sourceRepositoryPassword"),
					},
					{
						Name:      "helmDeployWaitSeconds",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "int",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   300,
					},
					{
						Name:      "helmValues",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "image",
						ResourceRef: []config.ResourceReference{
							{
								Name:"commonPipelineEnvironment",
								Param: "container/imageNameTag",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: true,
						Aliases:   []config.Alias{{Name: "deployImage"},},
						Default:   os.Getenv("PIPER_image"),
					},
					{
						Name:      "keepFailedDeployments",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "kubeConfig",
						ResourceRef: []config.ResourceReference{
							{
								Name:"kubeConfigFileCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"kubeConfigFileVaultSecretName",
								Type: "vaultSecretFile",
								Default: "kube-config",
							},
                        },
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_kubeConfig"),
					},
					{
						Name:      "kubeContext",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_kubeContext"),
					},
					{
						Name:      "namespace",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{{Name: "helmDeploymentNamespace"},},
						Default:   `default`,
					},
					{
						Name:      "dockerConfigJSON",
						ResourceRef: []config.ResourceReference{
							{
								Name:"dockerConfigJsonCredentialsId",
								Type: "secret",
							},
                        
							{
								Name:"dockerConfigFileVaultSecretName",
								Type: "vaultSecretFile",
								Default: "docker-config",
							},
                        },
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_dockerConfigJSON"),
					},
					{
						Name:      "helmCommand",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_helmCommand"),
					},
					{
						Name:      "appVersion",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_appVersion"),
					},
					{
						Name:      "dependency",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_dependency"),
					},
					{
						Name:      "packageDependencyUpdate",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "dumpLogs",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "filterTest",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_filterTest"),
					},
					{
						Name:      "customTlsCertificateLinks",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "[]string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   []string{},
					},
					{
						Name:      "publish",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   false,
					},
					{
						Name:      "version",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   os.Getenv("PIPER_version"),
					},
					{
						Name:      "renderSubchartNotes",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"GENERAL","PARAMETERS","STAGES","STEPS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
					{
						Name:      "templateStartDelimiter",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"STEPS","PARAMETERS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `{{`,
					},
					{
						Name:      "templateEndDelimiter",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"STEPS","PARAMETERS",},
						Type:      "string",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   `}}`,
					},
					{
						Name:      "renderValuesTemplate",
						ResourceRef: []config.ResourceReference{},
						Scope:     []string{"STEPS","PARAMETERS",},
						Type:      "bool",
						Mandatory: false,
						Aliases:   []config.Alias{},
						Default:   true,
					},
				},
			},
			Containers: []config.Container{
				{Image: "dtzar/helm-kubectl:3",WorkingDir: "/config",Options: []config.Option{ {Name: "-u", Value: "0"}, },
				}, 
			},
			Outputs: config.StepOutputs{
				Resources: []config.StepResources{
					{
						Name: "commonPipelineEnvironment",
						Type: "piperEnvironment",
						Parameters: []map[string]interface{}{
							{"name": "custom/helmChartUrl",},
						},
					},
				},
			},
		},
	}
	return theMetaData
}
