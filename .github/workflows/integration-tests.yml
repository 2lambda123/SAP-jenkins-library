name: Integration tests

on:
  push:
    branches:
      - master
      - it/**

jobs:
  start:
    name: Start
    outputs:
      go_version: ${{ steps.go_version.outputs.go_version }}
      sha: ${{ steps.sha.outputs.sha }}
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.10.0
      - uses: actions/checkout@v3
      - name: Get GO version
        id: go_version
        run: |
          echo "::set-output name=go_version::$(cat go.mod | grep go | head -1 | awk '{print $2}')"
      - name: Get commit SHA
        id: sha
        run: |
          echo "::set-output name=sha::$(git log --format=%H -n 1)"
      - name: Update status
        run: |
          curl \
            --location \
            --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ steps.sha.outputs.sha }}' \
            -H 'Content-Type: application/json' \
            --data '{"state": "pending",
                    "context": "Go / integration-tests",
                    "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' \
            -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}'

  build_piper:
    name: Build Piper
    needs:
      - start
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.start.outputs.sha }}
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.start.outputs.go_version }}
      - name: Build
        # with `-tags release` we ensure that shared test utilities won't end up in the binary
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o piper -tags release
      - name: Upload Piper binary
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: piper
          path: piper

  build_integration_tests:
    name: Build integration tests
    needs:
      - start
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.start.outputs.sha }}
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.start.outputs.go_version }}
      - name: Build
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go test -c -o integration_tests -tags integration ./integration/...
      - name: Upload integration tests binary
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: integration_tests
          path: integration_tests
      - name: Get artifacts list
        if: success()
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}" \
            https://api.github.com/repos/SAP/jenkins-library/actions/artifacts

  get_integration_test_matrix:
    name: Get integration test matrix
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    needs:
      - start
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.start.outputs.sha }}
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.start.outputs.go_version }}
      - name: Form integration tests run matrix
        id: matrix
        run: |
          echo "::set-output name=matrix::$(go run .github/workflows/parse_integration_test_list.go -file ./integration/github_actions_integration_test_list.yml)"

  get_image_list:
    name: Get image list
    outputs:
      image-list: ${{ steps.image-list.outputs.image-list }}
    needs:
      - start
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.start.outputs.sha }}
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.start.outputs.go_version }}
      - name: Get image list
        id: image-list
        run: |
          echo "::set-output name=image-list::1"

  run_integration_tests:
    name: Run integration tests
    needs:
      - start
      - get_integration_test_matrix
      - get_image_list
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.get_integration_test_matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.start.outputs.sha }}
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.start.outputs.go_version }}
      - name: Load images
        run: |
          go run .github/workflows/image_loader.go
      - name: Wait for Piper binary
        uses: lewagon/wait-on-check-action@v1.1.2
        with:
          ref: ${{ needs.start.outputs.sha }}
          check-name: 'Build Piper'
      - name: Download Piper binary
        uses: actions/download-artifact@v3
        with:
          name: piper
      - name: Wait for integration tests binary
        uses: lewagon/wait-on-check-action@v1.1.2
        with:
          ref: ${{ needs.start.outputs.sha }}
          check-name: 'Build integration tests'
      - name: Download integration tests binary
        uses: actions/download-artifact@v3
        with:
          name: integration_tests
          path: ./integration/
      - name: Run test
        env:
          PIPER_INTEGRATION_GITHUB_TOKEN: ${{secrets.PIPER_INTEGRATION_GITHUB_TOKEN}}
          PIPER_INTEGRATION_SONAR_TOKEN: ${{secrets.PIPER_INTEGRATION_SONAR_TOKEN}}
        run: |
          chmod +x piper ./integration/integration_tests
          cd ./integration
          ./integration_tests -test.v -test.run ${{ matrix.run }}
#                    go run .github/workflows/artifact_downloader.go -workflow ${{ github.run_id }} -token ${PIPER_INTEGRATION_GITHUB_TOKEN}

  finish:
    name: Finish
    if: always() && needs.start.result == 'success'
    needs:
      - start
      - get_integration_test_matrix
      - get_image_list
      - run_integration_tests
      - build_piper
      - build_integration_tests
    runs-on: ubuntu-latest
    steps:
      - name: Update status
        run: |
          if [[ "${{ needs.run_integration_tests.result }}" == "success" ]]
          then
            curl \
              --location \
              --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ needs.start.outputs.sha }}' \
              -H 'Content-Type: application/json' \
              --data '{"state": "success",
                      "context": "Go / integration-tests",
                      "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' \
              -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}' && \
            exit 0
          else
            curl \
              --location \
              --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ needs.start.outputs.sha }}' \
              -H 'Content-Type: application/json' \
              --data '{"state": "failure",
                      "context": "Go / integration-tests",
                      "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' \
              -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}' && \
            exit 1
          fi
